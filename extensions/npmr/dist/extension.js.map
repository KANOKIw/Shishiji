{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://npmr/./src/extension.ts","webpack://npmr/./src/file.ts","webpack://npmr/external commonjs \"vscode\"","webpack://npmr/external node-commonjs \"child_process\"","webpack://npmr/external node-commonjs \"fs\"","webpack://npmr/external node-commonjs \"path\"","webpack://npmr/webpack/bootstrap","webpack://npmr/webpack/startup"],"sourcesContent":["import * as vscode from \"vscode\";\r\nimport path from \"path\";\r\nimport child_process from \"child_process\";\r\nimport fs from \"fs\";\r\n\r\nimport { listFiles, toSlashPath } from \"./file\";\r\n\r\n\r\nexport function activate(context: vscode.ExtensionContext){\r\n\tconst do_workspace_directory = vscode.commands.registerCommand(\"npmr.do_workspace_directory\", async function(){\r\n\t\tconst workspacefoldor = vscode.workspace.workspaceFolders?.[0];\r\n\r\n\t\tif (workspacefoldor){\r\n\t\t\tconst workspace = workspacefoldor.uri.fsPath;\r\n\t\t\tconst packageJsonPath = path.join(workspace, \"package.json\");\r\n\r\n\t\t\tif (fs.existsSync(packageJsonPath)){\r\n\t\t\t\tconst bar = setInstallingBar();\r\n\t\t\t\tawait installDependencies(packageJsonPath, true);\r\n\t\t\t\tbar.dispose();\r\n\t\t\t} else {\r\n\t\t\t\tvscode.window.showErrorMessage(\"No package.json found in the workspace.\");\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tvscode.window.showErrorMessage(\"No workspace opened.\");\r\n\t\t}\r\n\t});\r\n\tconst do_all_directory = vscode.commands.registerCommand(\"npmr.do_all_directory\", async function(){\r\n\t\tconst workspacefoldor = vscode.workspace.workspaceFolders?.[0];\r\n\r\n\t\tif (workspacefoldor){\r\n\t\t\tconst workspace = workspacefoldor.uri.fsPath;\r\n\t\t\tconst packageJsonPaths = listFiles(workspace)\r\n\t\t\t.filter(_path => {\r\n\t\t\t\tif (path.basename(_path) === \"package.json\" && !toSlashPath(_path).includes(\"/node_modules/\"))\r\n\t\t\t\t\treturn true;\r\n\t\t\t})\r\n\t\t\t.map(_path=> {\r\n\t\t\t\treturn path.join(workspace, _path);\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\tif (packageJsonPaths.length == 0){\r\n\t\t\t\tvscode.window.showErrorMessage(\"No package.json found under the workspace.\");\r\n\t\t\t} else {\r\n\t\t\t\tconst installation: Promise<void>[] = [];\r\n\t\t\t\tconst bar = setInstallingBar();\r\n\r\n\t\t\t\tfor (const packageJsonPath of packageJsonPaths){\r\n\t\t\t\t\tinstallation.push(installDependencies(packageJsonPath));\r\n\t\t\t\t}\r\n\t\t\t\tPromise.all(installation)\r\n\t\t\t\t.then(rs => {\r\n\t\t\t\t\tbar.dispose();\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tvscode.window.showErrorMessage(\"No workspace opened.\");\r\n\t\t}\r\n\t});\r\n\r\n\tcontext.subscriptions.push(do_workspace_directory, do_all_directory);\r\n}\r\n\r\n\r\nasync function installDependencies(pkgjsonpath: string, showerr?: boolean){\r\n\tconst packageJson = JSON.parse(fs.readFileSync(pkgjsonpath, { encoding: \"utf-8\" }));\r\n\tconst dependenciesMap: {[key: string]: string} = packageJson[\"dependencies\"] || {};\r\n\tconst devDependenciesMap: {[key: string]: string} = packageJson[\"devDependencies\"] || {};\r\n\tconst enginesMap: {[key: string]: string} = packageJson[\"devDependencies\"] || {};\r\n\tconst dir = path.dirname(pkgjsonpath);\r\n\r\n\tif (Object.keys({ ...dependenciesMap, ...devDependenciesMap, ...enginesMap }).length > 0){\r\n\t\tconst dependencies: string[] = [];\r\n\t\tconst devDependencies: string[] = [];\r\n\t\tconst engines: string[] = [];\r\n\r\n\t\tfor (const name in dependenciesMap){\r\n\t\t\tconst version: string = dependenciesMap[name];\r\n\t\t\tdependencies.push(name.concat(\"@\", version.slice(1)));\r\n\t\t}\r\n\t\tfor (const dname in devDependenciesMap){\r\n\t\t\tconst version: string = devDependenciesMap[dname];\r\n\t\t\tdevDependencies.push(dname.concat(\"@\", version.slice(1)));\r\n\t\t}\r\n\t\tfor (const ename in devDependenciesMap){\r\n\t\t\tconst version: string = enginesMap[ename];\r\n\t\t\tengines.push(ename.concat(\"@\", version.slice(1)));\r\n\t\t}\r\n\r\n\t\tconst command = \"npm install \".concat([ ...dependencies, ...devDependencies, ...engines ].join(\" \"));\r\n\t\tconst statusBarItem = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Left);\r\n\r\n\t\tstatusBarItem.text = \"$(sync~spin) Installing dependencies\";\r\n\t\tstatusBarItem.show();\r\n\r\n\t\tprocess.chdir(dir);\r\n\t\tchild_process.exec(command, (err) => {\r\n\t\t\tstatusBarItem.dispose();\r\n\t\t\tif (err){\r\n\t\t\t\tvscode.window.showErrorMessage(`Error while installing package: \\nDirectory: ${dir}, Error: ${err.message}`);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tvscode.window.showInformationMessage(`Directory: ${dir}\\ndependencies: ${dependencies.length > 0 ? dependencies.join(\", \") : \"none\"}\r\n\t\t\t\\ndevDependencies: ${devDependencies.length > 0 ? devDependencies.join(\", \") : \"none\"}\r\n\t\t\t\\nengines: ${engines.length > 0 ? engines.join(\", \") : \"none\"}`);\r\n\t\t});\r\n\t} else if (showerr){\r\n\t\tvscode.window.showInformationMessage(\"No dependencies or devDependencies found in package.json.\",);\r\n\t}\r\n}\r\n\r\n\r\nfunction setInstallingBar(){\r\n\tconst statusBarItem = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Left);\r\n\r\n\tstatusBarItem.text = \"$(sync~spin) Installing dependencies\";\r\n\tstatusBarItem.show();\r\n\r\n\treturn statusBarItem;\r\n}\r\n\r\n\r\nexport { }\r\n","import fs from \"fs\";\r\nimport path from \"path\";\r\n\r\n\r\nexport function listFiles(dir: string): string[]{\r\n\tconst files: string[] = [];\r\n  \r\n\tfunction tverse(cdir: string){\r\n\t  \tconst ims = fs.readdirSync(cdir);\r\n  \r\n\t  \tfor (const im of ims){\r\n\t\t\tconst impath = path.join(cdir, im);\r\n\t\r\n\t\t\tif (fs.statSync(impath).isDirectory()){\r\n\t\t\t\ttverse(impath);\r\n\t\t\t} else {\r\n\t\t\t\tfiles.push(impath);\r\n\t\t\t}\r\n\t  \t}\r\n\t}\r\n\r\n\ttverse(dir);\r\n\treturn files.map(f => { return f.replace(dir, \"\"); });\r\n}\r\n\r\n\r\nexport function toSlashPath(path: string){\r\n\treturn path.replace(/\\\\/g, \"/\")\r\n\t\t\t   .replace(/\\\\\\\\/g, \"/\")\r\n\t\t\t   .replace(/\\/\\//g, \"/\");\r\n}\r\n\r\n\r\nexport { }\r\n","module.exports = require(\"vscode\");","module.exports = require(\"child_process\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(112);\n"],"names":["async","installDependencies","pkgjsonpath","showerr","packageJson","JSON","parse","readFileSync","encoding","dependenciesMap","devDependenciesMap","enginesMap","dir","dirname","Object","keys","length","dependencies","devDependencies","engines","name","version","push","concat","slice","dname","ename","command","join","statusBarItem","vscode","window","createStatusBarItem","StatusBarAlignment","Left","text","show","process","chdir","exec","err","dispose","showErrorMessage","message","showInformationMessage","setInstallingBar","context","do_workspace_directory","commands","registerCommand","workspacefoldor","workspace","workspaceFolders","uri","fsPath","packageJsonPath","existsSync","bar","do_all_directory","packageJsonPaths","listFiles","filter","_path","basename","toSlashPath","includes","map","installation","Promise","all","then","rs","subscriptions","files","tverse","cdir","ims","readdirSync","im","impath","statSync","isDirectory","f","replace","path","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}